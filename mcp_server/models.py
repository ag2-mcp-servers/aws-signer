# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:49:53+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccountId(
    RootModel[constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12)]
):
    root: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12)


class Arn(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class BadRequestException(RootModel[Any]):
    root: Any


class BucketName(RootModel[str]):
    root: str


class CancelSigningProfileRequest(BaseModel):
    pass


class Category(Enum):
    AWSIoT = 'AWSIoT'


class CertificateArn(RootModel[str]):
    root: str


class ClientRequestToken(RootModel[str]):
    root: str


class ConflictException(RootModel[Any]):
    root: Any


class DescribeSigningJobRequest(BaseModel):
    pass


class DisplayName(RootModel[str]):
    root: str


class EncryptionAlgorithm(Enum):
    RSA = 'RSA'
    ECDSA = 'ECDSA'


class EncryptionAlgorithms(RootModel[List[EncryptionAlgorithm]]):
    root: List[EncryptionAlgorithm]


class GetSigningPlatformRequest(BaseModel):
    pass


class GetSigningProfileRequest(BaseModel):
    pass


class HashAlgorithm(Enum):
    SHA1 = 'SHA1'
    SHA256 = 'SHA256'


class HashAlgorithms(RootModel[List[HashAlgorithm]]):
    root: List[HashAlgorithm]


class ImageFormat(Enum):
    JSON = 'JSON'
    JSONEmbedded = 'JSONEmbedded'
    JSONDetached = 'JSONDetached'


class ImageFormats(RootModel[List[ImageFormat]]):
    root: List[ImageFormat]


class Integer(RootModel[int]):
    root: int


class InternalServiceErrorException(RootModel[Any]):
    root: Any


class JobId(RootModel[str]):
    root: str


class Key(RootModel[str]):
    root: str


class ListProfilePermissionsRequest(BaseModel):
    pass


class ListSigningJobsRequest(BaseModel):
    pass


class ListSigningPlatformsRequest(BaseModel):
    pass


class ListSigningProfilesRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=25)]):
    root: conint(ge=1, le=25)


class MaxSizeInMB(RootModel[int]):
    root: int


class NextToken(RootModel[str]):
    root: str


class NotFoundException(RootModel[Any]):
    root: Any


class PlatformId(RootModel[str]):
    root: str


class PolicySizeBytes(RootModel[int]):
    root: int


class Prefix(RootModel[str]):
    root: str


class ProfileName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_]{2,}', min_length=2, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_]{2,}', min_length=2, max_length=64)


class ProfileVersion(
    RootModel[constr(pattern=r'^[a-zA-Z0-9]{10}$', min_length=10, max_length=10)]
):
    root: constr(pattern=r'^[a-zA-Z0-9]{10}$', min_length=10, max_length=10)


class RemoveProfilePermissionRequest(BaseModel):
    pass


class RequestedBy(RootModel[str]):
    root: str


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RevocationReasonString(RootModel[constr(min_length=1, max_length=500)]):
    root: constr(min_length=1, max_length=500)


class RevokeSignatureRequest(BaseModel):
    jobOwner: Optional[AccountId] = None
    reason: RevocationReasonString


class S3Destination(BaseModel):
    bucketName: Optional[BucketName] = None
    prefix: Optional[Prefix] = None


class S3SignedObject(BaseModel):
    bucketName: Optional[BucketName] = None
    key: Optional[Key] = None


class ServiceLimitExceededException(RootModel[Any]):
    root: Any


class SignedObject(BaseModel):
    s3: Optional[S3SignedObject] = None


class SigningConfigurationOverrides(BaseModel):
    encryptionAlgorithm: Optional[EncryptionAlgorithm] = None
    hashAlgorithm: Optional[HashAlgorithm] = None


class SigningImageFormat(BaseModel):
    defaultFormat: ImageFormat
    supportedFormats: ImageFormats


class SigningMaterial(BaseModel):
    certificateArn: CertificateArn


class SigningParameterKey(RootModel[str]):
    root: str


class SigningParameterValue(RootModel[str]):
    root: str


class SigningParameters(RootModel[Optional[Dict[str, SigningParameterValue]]]):
    root: Optional[Dict[str, SigningParameterValue]] = None


class SigningPlatformOverrides(BaseModel):
    signingConfiguration: Optional[SigningConfigurationOverrides] = None
    signingImageFormat: Optional[ImageFormat] = None


class SigningProfileStatus(Enum):
    Active = 'Active'
    Canceled = 'Canceled'
    Revoked = 'Revoked'


class SigningStatus(Enum):
    InProgress = 'InProgress'
    Failed = 'Failed'
    Succeeded = 'Succeeded'


class StartSigningJobResponse(BaseModel):
    jobId: Optional[JobId] = None
    jobOwner: Optional[AccountId] = None


class StatusReason(RootModel[str]):
    root: str


class Statuses(RootModel[List[SigningProfileStatus]]):
    root: List[SigningProfileStatus]


class String(RootModel[str]):
    root: str


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class ValidationException(RootModel[Any]):
    root: Any


class ValidityType(Enum):
    DAYS = 'DAYS'
    MONTHS = 'MONTHS'
    YEARS = 'YEARS'


class Version(RootModel[str]):
    root: str


class Bool(RootModel[bool]):
    root: bool


class Status(Enum):
    InProgress = 'InProgress'
    Failed = 'Failed'
    Succeeded = 'Succeeded'


class Destination(BaseModel):
    s3: Optional[S3Destination] = None


class SigningJobsJobIdRevokePutRequest(BaseModel):
    jobOwner: Optional[constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12)] = (
        Field(None, description='AWS account ID of the job owner.')
    )
    reason: constr(min_length=1, max_length=500) = Field(
        ..., description='The reason for revoking the signing job.'
    )


class Overrides(BaseModel):
    signingConfiguration: Optional[SigningConfigurationOverrides] = None
    signingImageFormat: Optional[ImageFormat] = None


class SignatureValidityPeriod(BaseModel):
    type: Optional[ValidityType] = None
    value: Optional[Integer] = None


class SigningMaterial1(BaseModel):
    certificateArn: Optional[CertificateArn] = None


class SigningProfilesProfileNamePutRequest(BaseModel):
    overrides: Optional[Overrides] = Field(
        None,
        description='Any overrides that are applied to the signing configuration of a code signing platform.',
    )
    platformId: str = Field(
        ..., description='The ID of the signing platform to be created.'
    )
    signatureValidityPeriod: Optional[SignatureValidityPeriod] = Field(
        None, description='The validity period for a signing job.'
    )
    signingMaterial: Optional[SigningMaterial1] = Field(
        None, description='The ACM certificate that is used to sign your code.'
    )
    signingParameters: Optional[Dict[str, SigningParameterValue]] = Field(
        None,
        description='Map of key-value pairs for signing. These can include any information that you want to use during signing.',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Tags to be associated with the signing profile that is being created.',
    )


class SigningProfilesProfileNamePermissionsPostRequest(BaseModel):
    action: str = Field(
        ...,
        description='The AWS Signer action permitted as part of cross-account permissions.',
    )
    principal: str = Field(
        ...,
        description='The AWS principal receiving cross-account permissions. This may be an IAM role or another AWS account ID.',
    )
    profileVersion: Optional[
        constr(pattern=r'^[a-zA-Z0-9]{10}$', min_length=10, max_length=10)
    ] = Field(None, description='The version of the signing profile.')
    revisionId: Optional[str] = Field(
        None, description='A unique identifier for the current profile revision.'
    )
    statementId: str = Field(
        ...,
        description='A unique identifier for the cross-account permission statement.',
    )


class SigningProfilesProfileNameRevokePutRequest(BaseModel):
    effectiveTime: datetime = Field(
        ...,
        description='A timestamp for when revocation of a Signing Profile should become effective. Signatures generated using the signing profile after this timestamp are not trusted.',
    )
    profileVersion: constr(
        pattern=r'^[a-zA-Z0-9]{10}$', min_length=10, max_length=10
    ) = Field(..., description='The version of the signing profile to be revoked.')
    reason: constr(min_length=1, max_length=500) = Field(
        ..., description='The reason for revoking a signing profile.'
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ..., description='One or more tags to be associated with the signing profile.'
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class AddProfilePermissionRequest(BaseModel):
    action: String
    principal: String
    profileVersion: Optional[ProfileVersion] = None
    revisionId: Optional[String] = None
    statementId: String


class AddProfilePermissionResponse(BaseModel):
    revisionId: Optional[String] = None


class EncryptionAlgorithmOptions(BaseModel):
    allowedValues: EncryptionAlgorithms
    defaultValue: EncryptionAlgorithm


class HashAlgorithmOptions(BaseModel):
    allowedValues: HashAlgorithms
    defaultValue: HashAlgorithm


class Permission(BaseModel):
    action: Optional[String] = None
    principal: Optional[String] = None
    profileVersion: Optional[ProfileVersion] = None
    statementId: Optional[String] = None


class Permissions(RootModel[List[Permission]]):
    root: List[Permission]


class PutSigningProfileResponse(BaseModel):
    arn: Optional[String] = None
    profileVersion: Optional[ProfileVersion] = None
    profileVersionArn: Optional[Arn] = None


class RemoveProfilePermissionResponse(BaseModel):
    revisionId: Optional[String] = None


class RevokeSigningProfileRequest(BaseModel):
    effectiveTime: Timestamp
    profileVersion: ProfileVersion
    reason: RevocationReasonString


class S3Source(BaseModel):
    bucketName: BucketName
    key: Key
    version: Version


class SigningConfiguration(BaseModel):
    encryptionAlgorithmOptions: EncryptionAlgorithmOptions
    hashAlgorithmOptions: HashAlgorithmOptions


class SigningJobRevocationRecord(BaseModel):
    reason: Optional[String] = None
    revokedAt: Optional[Timestamp] = None
    revokedBy: Optional[String] = None


class SigningPlatform(BaseModel):
    category: Optional[Category] = None
    displayName: Optional[String] = None
    maxSizeInMB: Optional[MaxSizeInMB] = None
    partner: Optional[String] = None
    platformId: Optional[String] = None
    revocationSupported: Optional[Bool] = None
    signingConfiguration: Optional[SigningConfiguration] = None
    signingImageFormat: Optional[SigningImageFormat] = None
    target: Optional[String] = None


class SigningPlatforms(RootModel[List[SigningPlatform]]):
    root: List[SigningPlatform]


class SigningProfileRevocationRecord(BaseModel):
    revocationEffectiveFrom: Optional[Timestamp] = None
    revokedAt: Optional[Timestamp] = None
    revokedBy: Optional[String] = None


class Source(BaseModel):
    s3: Optional[S3Source] = None


class StartSigningJobRequest(BaseModel):
    clientRequestToken: ClientRequestToken
    destination: Destination
    profileName: ProfileName
    profileOwner: Optional[AccountId] = None
    source: Source


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class SigningJobsPostRequest(BaseModel):
    clientRequestToken: str = Field(
        ...,
        description='String that identifies the signing request. All calls after the first that use this token return the same response as the first call.',
    )
    destination: Destination = Field(
        ...,
        description='Points to an <code>S3Destination</code> object that contains information about your S3 bucket.',
    )
    profileName: constr(pattern=r'^[a-zA-Z0-9_]{2,}', min_length=2, max_length=64) = (
        Field(..., description='The name of the signing profile.')
    )
    profileOwner: Optional[
        constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12)
    ] = Field(None, description='The AWS account ID of the signing profile owner.')
    source: Source = Field(
        ...,
        description='An <code>S3Source</code> object that contains information about the S3 bucket where you saved your unsigned code.',
    )


class DescribeSigningJobResponse(BaseModel):
    completedAt: Optional[Timestamp] = None
    createdAt: Optional[Timestamp] = None
    jobId: Optional[JobId] = None
    jobInvoker: Optional[AccountId] = None
    jobOwner: Optional[AccountId] = None
    overrides: Optional[SigningPlatformOverrides] = None
    platformDisplayName: Optional[DisplayName] = None
    platformId: Optional[PlatformId] = None
    profileName: Optional[ProfileName] = None
    profileVersion: Optional[ProfileVersion] = None
    requestedBy: Optional[RequestedBy] = None
    revocationRecord: Optional[SigningJobRevocationRecord] = None
    signatureExpiresAt: Optional[Timestamp] = None
    signedObject: Optional[SignedObject] = None
    signingMaterial: Optional[SigningMaterial] = None
    signingParameters: Optional[SigningParameters] = None
    source: Optional[Source] = None
    status: Optional[SigningStatus] = None
    statusReason: Optional[StatusReason] = None


class GetSigningPlatformResponse(BaseModel):
    category: Optional[Category] = None
    displayName: Optional[DisplayName] = None
    maxSizeInMB: Optional[MaxSizeInMB] = None
    partner: Optional[String] = None
    platformId: Optional[PlatformId] = None
    revocationSupported: Optional[Bool] = None
    signingConfiguration: Optional[SigningConfiguration] = None
    signingImageFormat: Optional[SigningImageFormat] = None
    target: Optional[String] = None


class GetSigningProfileResponse(BaseModel):
    arn: Optional[String] = None
    overrides: Optional[SigningPlatformOverrides] = None
    platformDisplayName: Optional[DisplayName] = None
    platformId: Optional[PlatformId] = None
    profileName: Optional[ProfileName] = None
    profileVersion: Optional[ProfileVersion] = None
    profileVersionArn: Optional[Arn] = None
    revocationRecord: Optional[SigningProfileRevocationRecord] = None
    signatureValidityPeriod: Optional[SignatureValidityPeriod] = None
    signingMaterial: Optional[SigningMaterial] = None
    signingParameters: Optional[SigningParameters] = None
    status: Optional[SigningProfileStatus] = None
    statusReason: Optional[String] = None
    tags: Optional[TagMap] = None


class ListProfilePermissionsResponse(BaseModel):
    nextToken: Optional[String] = None
    permissions: Optional[Permissions] = None
    policySizeBytes: Optional[PolicySizeBytes] = None
    revisionId: Optional[String] = None


class ListSigningPlatformsResponse(BaseModel):
    nextToken: Optional[String] = None
    platforms: Optional[SigningPlatforms] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class PutSigningProfileRequest(BaseModel):
    overrides: Optional[SigningPlatformOverrides] = None
    platformId: PlatformId
    signatureValidityPeriod: Optional[SignatureValidityPeriod] = None
    signingMaterial: Optional[SigningMaterial] = None
    signingParameters: Optional[SigningParameters] = None
    tags: Optional[TagMap] = None


class SigningJob(BaseModel):
    createdAt: Optional[Timestamp] = None
    isRevoked: Optional[Bool] = None
    jobId: Optional[JobId] = None
    jobInvoker: Optional[AccountId] = None
    jobOwner: Optional[AccountId] = None
    platformDisplayName: Optional[DisplayName] = None
    platformId: Optional[PlatformId] = None
    profileName: Optional[ProfileName] = None
    profileVersion: Optional[ProfileVersion] = None
    signatureExpiresAt: Optional[Timestamp] = None
    signedObject: Optional[SignedObject] = None
    signingMaterial: Optional[SigningMaterial] = None
    source: Optional[Source] = None
    status: Optional[SigningStatus] = None


class SigningJobs(RootModel[List[SigningJob]]):
    root: List[SigningJob]


class SigningProfile(BaseModel):
    arn: Optional[String] = None
    platformDisplayName: Optional[DisplayName] = None
    platformId: Optional[PlatformId] = None
    profileName: Optional[ProfileName] = None
    profileVersion: Optional[ProfileVersion] = None
    profileVersionArn: Optional[Arn] = None
    signatureValidityPeriod: Optional[SignatureValidityPeriod] = None
    signingMaterial: Optional[SigningMaterial] = None
    signingParameters: Optional[SigningParameters] = None
    status: Optional[SigningProfileStatus] = None
    tags: Optional[TagMap] = None


class SigningProfiles(RootModel[List[SigningProfile]]):
    root: List[SigningProfile]


class ListSigningJobsResponse(BaseModel):
    jobs: Optional[SigningJobs] = None
    nextToken: Optional[NextToken] = None


class ListSigningProfilesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    profiles: Optional[SigningProfiles] = None
